package com.brtracker.services.midlink.processing.application;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.orm.hibernate3.LocalSessionFactoryBean;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import com.brtracker.services.midlink.processing.DeviceStateDao;
import com.brtracker.services.midlink.processing.MessageAction;
import com.brtracker.services.midlink.processing.MessagePropertyResolver;
import com.brtracker.services.midlink.processing.MessageTypeHandler;
import com.brtracker.services.midlink.processing.MqClient;
import com.brtracker.services.midlink.processing.PacketDispatcher;
import com.brtracker.services.midlink.processing.WsClient;
import com.brtracker.shared.utils.SystemConfiguration;
import com.brtracker.shared.utils.packet.PacketReaderController;

import static com.brtracker.shared.utils.SystemConfiguration.MIDLINK;
import static com.brtracker.shared.utils.SystemConfiguration.MIDLINK_DIST_THRESHOLD;
import static com.brtracker.shared.utils.SystemConfiguration.MIDLINK_TIME_THRESHOLD;
import static org.mockito.Mockito.*;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(
		locations={"classpath:/com/brtracker/services/midlink/processing/application/spring/test-beans.xml"})
public class ActionHelperTest {

	// Spring injected
	@Autowired
	private DeviceStateDao deviceStateDao;
	@Autowired
	private PacketReaderController readerController;
	@Autowired
	private LocalSessionFactoryBean mySessionFactory; 
	@Autowired
	private MessagePropertyResolver propertyResolver;
	
	// Locally created
	private ActionHelper actionHelper;
	private PacketDispatcher packetDispatcher;
	private GpsUnitStatusAction gpsUnitStatusAction;
	private JBusTripAction jBusTripAction;
	private IOServiceTripAction iOServiceTripAction;
	
	private MqClient mqClient;
	
	private WsClient wsClient;
	private MessageAuditLogger messageAuditLogger;
	private SystemConfiguration systemConfiguration;
	
	@Before
	public void setUp() {
		
		mySessionFactory.createDatabaseSchema();
		
		mqClient = mock(MqClient.class);
//		propertyResolver = mock(MessagePropertyResolver.class);
		wsClient = mock(WsClient.class);
		messageAuditLogger = mock(MessageAuditLogger.class);
		systemConfiguration = mock(SystemConfiguration.class);
		
		actionHelper = new ActionHelper();
		actionHelper.setDeviceStateDao(deviceStateDao);
		actionHelper.setSystemConfiguration(systemConfiguration);
		
		gpsUnitStatusAction = new GpsUnitStatusAction();
		gpsUnitStatusAction.setActionHelper(actionHelper);
		gpsUnitStatusAction.setDeviceStateDao(deviceStateDao);
		gpsUnitStatusAction.setMqClient(mqClient);
		gpsUnitStatusAction.setPropertyResolver(propertyResolver);
		gpsUnitStatusAction.setWsClient(wsClient);
		
		jBusTripAction = new JBusTripAction();
		jBusTripAction.setActionHelper(actionHelper);
		jBusTripAction.setMqClient(mqClient);
		jBusTripAction.setPropertyResolver(propertyResolver);
		jBusTripAction.setWsClient(wsClient);
		
		iOServiceTripAction = new IOServiceTripAction();
		iOServiceTripAction.setActionHelper(actionHelper);
		iOServiceTripAction.setMqClient(mqClient);
		iOServiceTripAction.setPropertyResolver(propertyResolver);
		iOServiceTripAction.setWsClient(wsClient);
		
		MessageTypeHandler gpsInfoHandler = new MessageTypeHandler();
		gpsInfoHandler.setActions(Arrays.asList(new MessageAction[]{gpsUnitStatusAction}));
		
		MessageTypeHandler jBusHandler = new MessageTypeHandler();
		jBusHandler.setActions(Arrays.asList(new MessageAction[]{jBusTripAction}));
		
		MessageTypeHandler ioServiceHandler = new MessageTypeHandler();
		ioServiceHandler.setActions(Arrays.asList(new MessageAction[]{iOServiceTripAction}));
		
		Map<String, MessageTypeHandler> handlers = new HashMap<String, MessageTypeHandler>();
		handlers.put("PicoloGpsInfoMessage", gpsInfoHandler);
		handlers.put("PicoloJBusMessage", jBusHandler);
		handlers.put("PicoloIOServiceMessage", ioServiceHandler);
		
		packetDispatcher = new PacketDispatcher();
		packetDispatcher.setMessageTypeHandlers(handlers);
		packetDispatcher.setReaderController(readerController);
		packetDispatcher.setMessageAuditLogger(messageAuditLogger);
	}
	
	@After
	public void tearDown() {
		mySessionFactory.dropDatabaseSchema();
	}
	
	@Test
	public void testIsMoving() {
		
		when(
			systemConfiguration.getConfigElement(MIDLINK, MIDLINK_DIST_THRESHOLD, "30.48"))
		.thenReturn(
			"30.48");
		when(
			systemConfiguration.getConfigElement(MIDLINK, MIDLINK_TIME_THRESHOLD, "180000"))
		.thenReturn(
			"180000");
		
		List<short[]> packets = getPackates();
		for (short[] p: packets) {
			packetDispatcher.dispatchPacket(p);
		}
		System.out.println("waiting...");
	}

	private List<short[]> getPackates() {
		
		List<short[]> packets = new ArrayList<short[]>();
		packets.add(new short[] {
				0x68, 0x30, 0x31, 0x0, 0x33, 0x30, 0x30, 0x31, 0x0, 0x68, 0x30, 0x32, 0x0, 0x30, 0x34, 0x35, 0x31, 0x31, 0x30, 0x32, 0x33, 0x33, 0x30, 0x31, 0x34, 0x0, 0x68, 0x30, 0x33, 0x0, 0x31, 0x33, 0x33, 0x30, 0x37, 0x39, 0x37, 0x32, 0x39, 0x39, 0x35, 0x36, 0x33, 0x0, 0x2, 0x31, 0xdb, 0xd2, 0xc4, 0x0, 0x6f, 0xde, 0xb4, 0xc9, 0x0, 0x1, 0x0, 0x34, 0x0, 0x5, 0x0, 0xff, 0x0, 0x10, 0x1, 0x56, 0x6, 0xea, 0xfb, 0xa3, 0xa5, 0x37, 0x0, 0x0, 0x1c, 0x32, 0xc3, 0x2f, 0xb, 0xd0, 0x0, 0x6, 0x0, 0x36, 0x0, 0x9, 0x0, 0x37, 0x36, 0x32, 0x39, 0x35, 0x35, 0x0, 0x13, 0x0, 0x31, 0x33, 0x37, 0x35, 0x36, 0x0, 0x14, 0x0, 0x30, 0x2c, 0x30, 0x2c, 0x30, 0x2c, 0x30, 0x0, 0xf7, 0x0, 0x38, 0x30, 0x36, 0x34, 0x35, 0x35, 0x0, 0xf8, 0x0, 0x31, 0x32, 0x30, 0x2c, 0x30, 0x2c, 0x30, 0x2c, 0x30, 0x2c, 0x30, 0x0, 0xf9, 0x0, 0x31, 0x0, 0xfb, 0x0, 0x31, 0x34, 0x34, 0x0, 0xfc, 0x0, 0x31, 0x37, 0x38, 0x0, 0xff, 0x0, 0x31, 0x33, 0x33, 0x30, 0x37, 0x39, 0x37, 0x32, 0x38, 0x36, 0x0, 0x3, 0x0
		});
		packets.add(new short[] {
				0x68, 0x30, 0x31, 0x0, 0x33, 0x30, 0x30, 0x31, 0x0, 0x68, 0x30, 0x32, 0x0, 0x30, 0x34, 0x35, 0x31, 0x31, 0x30, 0x32, 0x33, 0x33, 0x30, 0x31, 0x34, 0x0, 0x68, 0x30, 0x33, 0x0, 0x31, 0x33, 0x33, 0x30, 0x37, 0x39, 0x37, 0x32, 0x39, 0x39, 0x35, 0x36, 0x33, 0x0, 0x2, 0x31, 0xdb, 0xd2, 0xc4, 0x0, 0x6f, 0xde, 0xb4, 0xc9, 0x0, 0x1, 0x0, 0x34, 0x0, 0x5, 0x0, 0xff, 0x0, 0x10, 0x1, 0x56, 0x6, 0xea, 0xfb, 0xa3, 0xa5, 0x37, 0x0, 0x0, 0x1c, 0x32, 0xc3, 0x2f, 0xb, 0xd0, 0x0, 0x6, 0x0, 0x36, 0x0, 0x9, 0x0, 0x37, 0x36, 0x32, 0x39, 0x35, 0x35, 0x0, 0x13, 0x0, 0x31, 0x33, 0x37, 0x35, 0x36, 0x0, 0x14, 0x0, 0x30, 0x2c, 0x30, 0x2c, 0x30, 0x2c, 0x30, 0x0, 0xf7, 0x0, 0x38, 0x30, 0x36, 0x34, 0x35, 0x35, 0x0, 0xf8, 0x0, 0x31, 0x32, 0x30, 0x2c, 0x30, 0x2c, 0x30, 0x2c, 0x30, 0x2c, 0x30, 0x0, 0xf9, 0x0, 0x31, 0x0, 0xfb, 0x0, 0x31, 0x34, 0x34, 0x0, 0xfc, 0x0, 0x31, 0x37, 0x38, 0x0, 0xff, 0x0, 0x31, 0x33, 0x33, 0x30, 0x37, 0x39, 0x37, 0x32, 0x38, 0x36, 0x0, 0x3, 0x0
		});
		packets.add(new short[] {
				0x68, 0x30, 0x31, 0x0, 0x33, 0x30, 0x30, 0x31, 0x0, 0x68, 0x30, 0x32, 0x0, 0x30, 0x34, 0x35, 0x31, 0x31, 0x30, 0x32, 0x33, 0x33, 0x30, 0x31, 0x34, 0x0, 0x68, 0x30, 0x33, 0x0, 0x31, 0x33, 0x33, 0x30, 0x37, 0x39, 0x37, 0x33, 0x37, 0x31, 0x35, 0x31, 0x36, 0x0, 0x2, 0x31, 0xdb, 0xd2, 0xc5, 0x0, 0x6f, 0x55, 0x7a, 0xc9, 0x0, 0x1, 0x0, 0x34, 0x0, 0x5, 0x0, 0xff, 0x0, 0x10, 0x1, 0x56, 0x6, 0xea, 0xfb, 0xa3, 0xa5, 0x37, 0x0, 0x0, 0x1c, 0x33, 0xc3, 0x3b, 0xb, 0xd0, 0x0, 0x6, 0x0, 0x33, 0x0, 0x8, 0x0, 0x31, 0x37, 0x3a, 0x35, 0x32, 0x3a, 0x35, 0x39, 0x0, 0x9, 0x0, 0x37, 0x36, 0x32, 0x39, 0x35, 0x35, 0x0, 0x13, 0x0, 0x31, 0x33, 0x37, 0x35, 0x37, 0x0, 0xf7, 0x0, 0x38, 0x30, 0x36, 0x34, 0x35, 0x35, 0x0, 0xf8, 0x0, 0x37, 0x32, 0x2c, 0x30, 0x2c, 0x30, 0x2c, 0x30, 0x2c, 0x30, 0x0, 0xf9, 0x0, 0x31, 0x0, 0xfb, 0x0, 0x31, 0x34, 0x34, 0x0, 0xfc, 0x0, 0x31, 0x38, 0x31, 0x0, 0xff, 0x0, 0x31, 0x33, 0x33, 0x30, 0x37, 0x39, 0x37, 0x33, 0x35, 0x38, 0x0, 0x3, 0x0
		});
		packets.add(new short[] {
				0x68, 0x30, 0x31, 0x0, 0x33, 0x30, 0x30, 0x31, 0x0, 0x68, 0x30, 0x32, 0x0, 0x30, 0x34, 0x35, 0x31, 0x31, 0x30, 0x32, 0x33, 0x33, 0x30, 0x31, 0x34, 0x0, 0x68, 0x30, 0x33, 0x0, 0x31, 0x33, 0x33, 0x30, 0x38, 0x30, 0x34, 0x35, 0x37, 0x31, 0x33, 0x39, 0x31, 0x0, 0x2, 0x31, 0xdb, 0xd2, 0xc6, 0x0, 0x66, 0x3b, 0xa0, 0xc9, 0x0, 0x1, 0x0, 0x34, 0x0, 0x5, 0x0, 0xff, 0x0, 0x10, 0x1, 0x56, 0x6, 0xc8, 0xfb, 0xa3, 0xa5, 0x4a, 0x0, 0x0, 0x1c, 0xab, 0xc3, 0x3b, 0xb, 0xd0, 0x0, 0x6, 0x0, 0x34, 0x0, 0x9, 0x0, 0x37, 0x36, 0x32, 0x39, 0x35, 0x35, 0x0, 0x13, 0x0, 0x31, 0x33, 0x37, 0x35, 0x38, 0x0, 0xf7, 0x0, 0x38, 0x30, 0x36, 0x34, 0x35, 0x35, 0x0, 0xf8, 0x0, 0x37, 0x32, 0x30, 0x30, 0x2c, 0x30, 0x2c, 0x30, 0x2c, 0x30, 0x2c, 0x30, 0x0, 0xf9, 0x0, 0x31, 0x0, 0xfb, 0x0, 0x31, 0x34, 0x34, 0x0, 0xfc, 0x0, 0x31, 0x37, 0x36, 0x0, 0xff, 0x0, 0x31, 0x33, 0x33, 0x30, 0x38, 0x30, 0x34, 0x35, 0x35, 0x38, 0x0, 0x380
		});
		packets.add(new short[] {
				0x68, 0x30, 0x31, 0x0, 0x33, 0x30, 0x30, 0x31, 0x0, 0x68, 0x30, 0x32, 0x0, 0x30, 0x34, 0x35, 0x31, 0x31, 0x30, 0x32, 0x33, 0x33, 0x30, 0x31, 0x34, 0x0, 0x68, 0x30, 0x33, 0x0, 0x31, 0x33, 0x33, 0x30, 0x38, 0x31, 0x31, 0x37, 0x37, 0x31, 0x35, 0x31, 0x36, 0x0, 0x2, 0x31, 0xdb, 0xd2, 0xc7, 0x0, 0x66, 0xa3, 0x9e, 0xc9, 0x0, 0x1, 0x0, 0x34, 0x0, 0x5, 0x0, 0xff, 0x0, 0x10, 0x1, 0x56, 0x6, 0xca, 0xfb, 0xa3, 0xa5, 0x35, 0x0, 0x0, 0x1d, 0x23, 0xc3, 0x3b, 0xb, 0xd0, 0x0, 0x6, 0x0, 0x34, 0x0, 0x9, 0x0, 0x37, 0x36, 0x32, 0x39, 0x35, 0x35, 0x0, 0x13, 0x0, 0x31, 0x33, 0x37, 0x35, 0x39, 0x0, 0xf7, 0x0, 0x38, 0x30, 0x36, 0x34, 0x35, 0x35, 0x0, 0xf8, 0x0, 0x37, 0x32, 0x30, 0x30, 0x2c, 0x30, 0x2c, 0x30, 0x2c, 0x30, 0x2c, 0x30, 0x0, 0xf9, 0x0, 0x31, 0x0, 0xfb, 0x0, 0x31, 0x34, 0x34, 0x0, 0xfc, 0x0, 0x31, 0x37, 0x36, 0x0, 0xff, 0x0, 0x31, 0x33, 0x33, 0x30, 0x38, 0x31, 0x31, 0x37, 0x35, 0x38, 0x0, 0x3, 0x0
		});
		return packets;
	}
	
	private List<short[]> getPackates2() {
		
		List<short[]> packets = new ArrayList<short[]>();
		packets.add(new short[] {
				0x68, 0x30, 0x31, 0x0, 0x33, 0x30, 0x30, 0x31, 0x0, 0x68, 0x30, 0x32, 0x0, 0x30, 0x34, 0x35, 0x31, 0x31, 0x30, 0x32, 0x33, 0x33, 0x30, 0x31, 0x36, 0x0, 0x68, 0x30, 0x33, 0x0, 0x31, 0x33, 0x33, 0x31, 0x35, 0x36, 0x36, 0x38, 0x31, 0x35, 0x38, 0x34, 0x34, 0x0, 0x2, 0x31, 0xdb, 0xd3, 0x4e, 0x0, 0x7c, 0x18, 0xb9, 0xc9, 0x0, 0x1, 0x0, 0x34, 0x0, 0x5, 0x0, 0xff, 0x0, 0x10, 0x1, 0x55, 0xc8, 0x78, 0xfb, 0xa2, 0xec, 0xae, 0x0, 0x0, 0x63, 0xab, 0xc3, 0x38, 0x6, 0x5a, 0x0, 0x6, 0x0, 0x36, 0x0, 0x9, 0x0, 0x33, 0x31, 0x37, 0x32, 0x37, 0x33, 0x32, 0x0, 0x13, 0x0, 0x31, 0x32, 0x38, 0x39, 0x37, 0x0, 0xf6, 0x0, 0x30, 0x2c, 0x34, 0x2c, 0x31, 0x33, 0x36, 0x31, 0x2c, 0x33, 0x38, 0x34, 0x0, 0xf7, 0x0, 0x38, 0x30, 0x39, 0x31, 0x36, 0x38, 0x0, 0xf8, 0x0, 0x31, 0x32, 0x30, 0x2c, 0x30, 0x2c, 0x30, 0x2c, 0x30, 0x2c, 0x30, 0x2c, 0x30, 0x0, 0xf9, 0x0, 0x31, 0x0, 0xfa, 0x0, 0x38, 0x38, 0x0, 0xfb, 0x0, 0x31, 0x36, 0x35, 0x0, 0xfc, 0x0, 0x31, 0x39, 0x30, 0x0, 0xff, 0x0, 0x31, 0x33, 0x33, 0x31, 0x35, 0x36, 0x36, 0x38, 0x39, 0x30, 0x0, 0x3, 0x0
		});
		packets.add(new short[] {
				0x68, 0x30, 0x31, 0x0, 0x33, 0x30, 0x30, 0x31, 0x0, 0x68, 0x30, 0x32, 0x0, 0x30, 0x34, 0x35, 0x31, 0x31, 0x30, 0x32, 0x33, 0x33, 0x30, 0x31, 0x36, 0x0, 0x68, 0x30, 0x33, 0x0, 0x31, 0x33, 0x33, 0x31, 0x35, 0x36, 0x36, 0x38, 0x31, 0x35, 0x38, 0x34, 0x34, 0x0, 0x2, 0x31, 0xdb, 0xd3, 0x4e, 0x0, 0x7c, 0x18, 0xb9, 0xc9, 0x0, 0x1, 0x0, 0x34, 0x0, 0x5, 0x0, 0xff, 0x0, 0x10, 0x1, 0x55, 0xc8, 0x78, 0xfb, 0xa2, 0xec, 0xae, 0x0, 0x0, 0x63, 0xab, 0xc3, 0x38, 0x6, 0x5a, 0x0, 0x6, 0x0, 0x36, 0x0, 0x9, 0x0, 0x33, 0x31, 0x37, 0x32, 0x37, 0x33, 0x32, 0x0, 0x13, 0x0, 0x31, 0x32, 0x38, 0x39, 0x37, 0x0, 0xf6, 0x0, 0x30, 0x2c, 0x34, 0x2c, 0x31, 0x33, 0x36, 0x31, 0x2c, 0x33, 0x38, 0x34, 0x0, 0xf7, 0x0, 0x38, 0x30, 0x39, 0x31, 0x36, 0x38, 0x0, 0xf8, 0x0, 0x31, 0x32, 0x30, 0x2c, 0x30, 0x2c, 0x30, 0x2c, 0x30, 0x2c, 0x30, 0x2c, 0x30, 0x0, 0xf9, 0x0, 0x31, 0x0, 0xfa, 0x0, 0x38, 0x38, 0x0, 0xfb, 0x0, 0x31, 0x36, 0x35, 0x0, 0xfc, 0x0, 0x31, 0x39, 0x30, 0x0, 0xff, 0x0, 0x31, 0x33, 0x33, 0x31, 0x35, 0x36, 0x36, 0x38, 0x39, 0x30, 0x0, 0x3, 0x0
		});
		packets.add(new short[] {
				0x68, 0x30, 0x31, 0x0, 0x33, 0x30, 0x30, 0x31, 0x0, 0x68, 0x30, 0x32, 0x0, 0x30, 0x34, 0x35, 0x31, 0x31, 0x30, 0x32, 0x33, 0x33, 0x30, 0x31, 0x36, 0x0, 0x68, 0x30, 0x33, 0x0, 0x31, 0x33, 0x33, 0x31, 0x35, 0x36, 0x36, 0x39, 0x33, 0x35, 0x38, 0x34, 0x34, 0x0, 0x2, 0x31, 0xdb, 0xd3, 0x4f, 0x0, 0x7c, 0xcb, 0xcb, 0xc9, 0x0, 0x1, 0x0, 0x34, 0x0, 0x5, 0x0, 0xff, 0x0, 0x10, 0x1, 0x55, 0xa9, 0x1c, 0xfb, 0xa3, 0x23, 0x2e, 0xdb, 0xd2, 0x29, 0x63, 0xad, 0xc3, 0x38, 0x4, 0xc0, 0x0, 0x6, 0x0, 0x36, 0x0, 0x9, 0x0, 0x33, 0x31, 0x38, 0x32, 0x30, 0x31, 0x34, 0x0, 0x13, 0x0, 0x31, 0x32, 0x38, 0x39, 0x38, 0x0, 0xf6, 0x0, 0x30, 0x2c, 0x34, 0x2c, 0x31, 0x33, 0x36, 0x31, 0x2c, 0x33, 0x37, 0x38, 0x0, 0xf7, 0x0, 0x38, 0x30, 0x39, 0x31, 0x36, 0x38, 0x0, 0xf8, 0x0, 0x31, 0x31, 0x39, 0x2c, 0x30, 0x2c, 0x30, 0x2c, 0x30, 0x2c, 0x30, 0x2c, 0x31, 0x0, 0xf9, 0x0, 0x31, 0x0, 0xfa, 0x0, 0x38, 0x39, 0x0, 0xfb, 0x0, 0x31, 0x36, 0x35, 0x0, 0xfc, 0x0, 0x31, 0x39, 0x30, 0x0, 0xff, 0x0, 0x31, 0x33, 0x33, 0x31, 0x35, 0x36, 0x37, 0x30, 0x31, 0x30, 0x0, 0x3, 0x0
		});
		packets.add(new short[] {
				0x68, 0x30, 0x31, 0x0, 0x33, 0x30, 0x30, 0x31, 0x0, 0x68, 0x30, 0x32, 0x0, 0x30, 0x34, 0x35, 0x31, 0x31, 0x30, 0x32, 0x33, 0x33, 0x30, 0x31, 0x36, 0x0, 0x68, 0x30, 0x33, 0x0, 0x31, 0x33, 0x33, 0x31, 0x35, 0x36, 0x37, 0x30, 0x35, 0x36, 0x31, 0x34, 0x31, 0x0, 0x2, 0x31, 0xdb, 0xd3, 0x50, 0x0, 0x7c, 0xf8, 0xf, 0xc9, 0x0, 0x1, 0x0, 0x34, 0x0, 0x5, 0x0, 0xff, 0x0, 0x10, 0x1, 0x55, 0xa3, 0x92, 0xfb, 0xa3, 0x70, 0xc9, 0x1, 0x7c, 0x63, 0xaf, 0xc3, 0x38, 0xdb, 0xd3, 0x85, 0x0, 0x6, 0x0, 0x36, 0x0, 0x9, 0x0, 0x33, 0x31, 0x39, 0x31, 0x37, 0x36, 0x34, 0x0, 0x13, 0x0, 0x31, 0x32, 0x38, 0x39, 0x39, 0x0, 0xf6, 0x0, 0x30, 0x2c, 0x34, 0x2c, 0x31, 0x33, 0x36, 0x31, 0x2c, 0x33, 0x37, 0x38, 0x0, 0xf7, 0x0, 0x38, 0x30, 0x39, 0x31, 0x36, 0x38, 0x0, 0xf8, 0x0, 0x31, 0x32, 0x30, 0x2c, 0x30, 0x2c, 0x30, 0x2c, 0x30, 0x2c, 0x30, 0x2c, 0x30, 0x0, 0xf9, 0x0, 0x31, 0x0, 0xfa, 0x0, 0x39, 0x30, 0x0, 0xfb, 0x0, 0x31, 0x36, 0x35, 0x0, 0xfc, 0x0, 0x31, 0x39, 0x30, 0x0, 0xff, 0x0, 0x31, 0x33, 0x33, 0x31, 0x35, 0x36, 0x37, 0x31, 0x33, 0x30, 0x0, 0x3, 0x0
		});
		packets.add(new short[] {
				0x68, 0x30, 0x31, 0x0, 0x33, 0x30, 0x30, 0x31, 0x0, 0x68, 0x30, 0x32, 0x0, 0x30, 0x34, 0x35, 0x31, 0x31, 0x30, 0x32, 0x33, 0x33, 0x30, 0x31, 0x36, 0x0, 0x68, 0x30, 0x33, 0x0, 0x31, 0x33, 0x33, 0x31, 0x35, 0x36, 0x37, 0x31, 0x37, 0x37, 0x35, 0x37, 0x38, 0x0, 0x2, 0x31, 0xdb, 0xd3, 0x51, 0x0, 0x7c, 0x6b, 0x17, 0xc9, 0x0, 0x1, 0x0, 0x34, 0x0, 0x5, 0x0, 0xff, 0x0, 0x10, 0x1, 0x55, 0x82, 0xc2, 0xfb, 0xa3, 0x99, 0xd0, 0xdb, 0xd2, 0x32, 0x63, 0xb1, 0xc3, 0x38, 0x7, 0x12, 0x0, 0x6, 0x0, 0x36, 0x0, 0x9, 0x0, 0x33, 0x32, 0x30, 0x31, 0x39, 0x38, 0x30, 0x0, 0x13, 0x0, 0x31, 0x32, 0x39, 0x30, 0x30, 0x0, 0xf6, 0x0, 0x30, 0x2c, 0x34, 0x2c, 0x31, 0x33, 0x36, 0x31, 0x2c, 0x33, 0x36, 0x38, 0x0, 0xf7, 0x0, 0x38, 0x30, 0x39, 0x31, 0x36, 0x38, 0x0, 0xf8, 0x0, 0x31, 0x31, 0x36, 0x2c, 0x34, 0x2c, 0x30, 0x2c, 0x30, 0x2c, 0x30, 0x2c, 0x30, 0x0, 0xf9, 0x0, 0x31, 0x0, 0xfa, 0x0, 0x39, 0x30, 0x0, 0xfb, 0x0, 0x31, 0x36, 0x35, 0x0, 0xfc, 0x0, 0x31, 0x39, 0x30, 0x0, 0xff, 0x0, 0x31, 0x33, 0x33, 0x31, 0x35, 0x36, 0x37, 0x32, 0x35, 0x30, 0x0, 0x3, 0x0
		});
		packets.add(new short[] {
				0x68, 0x30, 0x31, 0x0, 0x33, 0x30, 0x30, 0x31, 0x0, 0x68, 0x30, 0x32, 0x0, 0x30, 0x34, 0x35, 0x31, 0x31, 0x30, 0x32, 0x33, 0x33, 0x30, 0x31, 0x36, 0x0, 0x68, 0x30, 0x33, 0x0, 0x31, 0x33, 0x33, 0x31, 0x35, 0x36, 0x37, 0x32, 0x39, 0x35, 0x39, 0x36, 0x39, 0x0, 0x2, 0x31, 0xdb, 0xd3, 0x52, 0x0, 0x7c, 0x97, 0x18, 0xc9, 0x0, 0x1, 0x0, 0x34, 0x0, 0x5, 0x0, 0xff, 0x0, 0x10, 0x1, 0x55, 0x6f, 0xe2, 0xfb, 0xa3, 0xa7, 0x17, 0x0, 0x92, 0x63, 0xb3, 0xc3, 0x38, 0xdb, 0xd2, 0x80, 0x0, 0x6, 0x0, 0x36, 0x0, 0x9, 0x0, 0x33, 0x32, 0x30, 0x37, 0x35, 0x38, 0x35, 0x0, 0x13, 0x0, 0x31, 0x32, 0x39, 0x30, 0x31, 0x0, 0xf6, 0x0, 0x30, 0x2c, 0x34, 0x2c, 0x31, 0x33, 0x33, 0x32, 0x2c, 0x33, 0x36, 0x34, 0x0, 0xf7, 0x0, 0x38, 0x30, 0x39, 0x31, 0x36, 0x38, 0x0, 0xf8, 0x0, 0x31, 0x32, 0x30, 0x2c, 0x30, 0x2c, 0x30, 0x2c, 0x30, 0x2c, 0x30, 0x2c, 0x30, 0x0, 0xf9, 0x0, 0x31, 0x0, 0xfa, 0x0, 0x39, 0x31, 0x0, 0xfb, 0x0, 0x31, 0x36, 0x35, 0x0, 0xfc, 0x0, 0x31, 0x38, 0x36, 0x0, 0xff, 0x0, 0x31, 0x33, 0x33, 0x31, 0x35, 0x36, 0x37, 0x33, 0x37, 0x30, 0x0, 0x3, 0x0
		});
		packets.add(new short[] {
				0x68, 0x30, 0x31, 0x0, 0x33, 0x30, 0x30, 0x31, 0x0, 0x68, 0x30, 0x32, 0x0, 0x30, 0x34, 0x35, 0x31, 0x31, 0x30, 0x32, 0x33, 0x33, 0x30, 0x31, 0x36, 0x0, 0x68, 0x30, 0x33, 0x0, 0x31, 0x33, 0x33, 0x31, 0x35, 0x37, 0x39, 0x37, 0x32, 0x36, 0x30, 0x30, 0x30, 0x0, 0x2, 0x31, 0xdb, 0xd3, 0x53, 0x0, 0x81, 0x7, 0x7f, 0xc9, 0x0, 0x1, 0x0, 0x34, 0x0, 0x5, 0x0, 0xff, 0x0, 0x10, 0x1, 0x55, 0x71, 0xf5, 0xfb, 0xa3, 0x99, 0x86, 0x0, 0xdb, 0xd2, 0x64, 0x83, 0xc3, 0x6, 0x6, 0xda, 0x0, 0x6, 0x0, 0x36, 0x0, 0x9, 0x0, 0x33, 0x32, 0x31, 0x33, 0x31, 0x35, 0x36, 0x0, 0x13, 0x0, 0x31, 0x32, 0x39, 0x30, 0x32, 0x0, 0xf6, 0x0, 0x30, 0x2c, 0x34, 0x2c, 0x31, 0x32, 0x32, 0x33, 0x2c, 0x33, 0x34, 0x33, 0x0, 0xf7, 0x0, 0x38, 0x30, 0x39, 0x31, 0x36, 0x38, 0x0, 0xf8, 0x0, 0x31, 0x32, 0x30, 0x2c, 0x31, 0x32, 0x32, 0x37, 0x30, 0x2c, 0x30, 0x2c, 0x32, 0x30, 0x2c, 0x30, 0x2c, 0x30, 0x0, 0xf9, 0x0, 0x31, 0x0, 0xfa, 0x0, 0x39, 0x36, 0x0, 0xfb, 0x0, 0x31, 0x36, 0x35, 0x0, 0xfc, 0x0, 0x31, 0x37, 0x31, 0x0, 0xff, 0x0, 0x31, 0x33, 0x33, 0x31, 0x35, 0x37, 0x39, 0x38, 0x30, 0x31, 0x0, 0x3, 0x0
		});
		return packets;
	}

}
