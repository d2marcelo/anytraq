package com.brtracker.shared.utils;

import java.nio.ByteBuffer;
import java.util.Arrays;

import com.brtracker.shared.utils.json.JSONMapperException;
import com.brtracker.shared.utils.wsutils.ServiceException;

public class EnforaPrint {

	public static void main(String[] args) throws ServiceException, JSONMapperException {
		
		byte[] buf1 = {0x0, 0x5, 0x2, 0x0, 0x0, 0x0, 0x9, 0xffffffc4, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
			0x30, 0x31, 0x32, 0x35, 0x36, 0x33, 0x30, 0x30, 0x30, 0x34, 0x33, 0x39, 0x31,
			0x35, 0x31, 0x20, 0x3f, 0x3f, 0x43, 0x4, 0x6e, 0x6c, 0x1, 0x38, 0xffffffef, 
			0x3f, 0xffffffff, 0x46, 0x7f, 0x3f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x55, 0x2d,
			0xffffffff, 0xffffffff, 0xfffffffd, 0x9, 0x0, 0x13, 0x6d, 0xfffffff5, 0xc,
			0x4, 0x1d, 0x2, 0x12, 0x4, 
			0x0, 0x0, 0x0, 0x0, 0x0,  0x0, 0x0, 0x0, 0x0, 0x0,
			0x0, 0x0, 0x0, 0x0, 0x0,  0x0, 0x0, 0x0, 0x0, 0x0,
			0x7, 0x0, 0x0, 0x0, 0x51, 0x18, 0x0};
			
		
		byte[] buf = {
				0x0, 0x5, 0x2, 0x0, 
				// position 4, this is param 1
				0x0, 0x0, 0x9, 0xffffffc4, 
				// position 8, MDMID
				0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x30, 0x31, 0x32, 0x35, 0x35, 0x33,
				0x30, 0x30, 0x30, 0x34, 0x33, 0x39, 0x31, 0x35, 0x31, 0x20, 
				0x3f, 0x9, 
				0x43, 
				0x4, 0x47, 0x5c, 
				0x1, 
				0x38, 0xffffffc9, 0x10, 
				0xffffffff, 0x46, 0x3f, 0x14, 
				0x0, 0x0, 0x0, 0x0, 0x3, 0x49,
				0xffffffc4, 0x3, 0x0, 0x0, 0x16, 0x9, 0x0, 0x12, 0xffffffdb, 0x27, 0xc,
				0x72, 0x0, 0x0, 0xe, 0xc, 0x0, 0x12, 0xffffffdb, 0x27, 0xc,  0x4, 0x1c,
				0x15, 0x36, 0x9,
				 0x0, 0x0, 0x0, 0x0, 0x0,  0x0, 0x0, 0x0, 0x0, 0x0,
				 0x0, 0x0, 0x0, 0x0, 0x0,  0x0, 0x0, 0x0, 0x0, 0x0,
				 0xffffffff, 0x0, 0x0, 0x0, 0x51, 0x13,0x0};
		
		byte[] buf2 = {
				0x0, 0x5, 0x2, 0x0, 0x0, 0x0, 0x8, 0x34, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x30, 0x31, 0x32, 0x35, 0x36, 0x33, 0x30, 0x30, 0x30, 0x34, 0x33, 0x39, 0x31, 0x35, 0x31, 0x20, 0x3f, 0x18, 0x42, 0x0, 0x50, 0x20, 0x1, 0x38, 0xffffffef, 0x7b, 0xffffffff, 0x46, 0x7f, 0x3f, 0x0, 0x0, 0x0, 0x0, 0x0, 0xffffffa3, 0x1c, 0x0, 0x0, 0xe, 0x9, 0x0, 0x1b, 0x3f, 0x3a, 0xc, 0x5, 0x2, 0x4, 0x11, 0x38
		};

		byte[] buf3 = {
				0x0, 0x5, 0x2, 0x0, 0x0, 0x0, 0x8, 0x34, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x30, 0x31, 0x32, 0x35, 0x36, 0x33, 0x30, 0x30, 0x30, 0x34, 0x33, 0x39, 0x31, 0x35, 0x31, 0x20, 0x3f, 0x18, 0x42, 0x0, 0x50, 0x20, 0x1, 0x38, 0xffffffef, 0x7b, 0xffffffff, 0x46, 0x7f, 0x3f, 0x0, 0x0, 0x0, 0x0, 0x0, 0xffffffa3, 0xffffffe4, 0x0, 0x0, 0xe, 0x9, 0x0, 0x1b, 0x3f, 0x3a, 0xc, 0x5, 0x2, 0x4, 0x13, 0x38
		};

		byte[] buf4 = {
				0x0, 0x5, 0x2, 0x0, 0x0, 0x0, 0x26, 0xffffffb6, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x53, 0x42, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x20, 0x3f, 0x19, 0xffffffba, 0x0, 0xffffffec, 0x60, 0x1, 0x38, 0xffffffc9, 0x12, 0xffffffff, 0x46, 0x3f, 0x15, 0x0, 0x0, 0x2, 0xffffffee, 0x2, 0xffffffd2, 0x5a, 0x0, 0x0, 0x19, 0x9, 0xc, 0x5, 0x6, 0x12, 0x31, 0x16, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xffffffff, 0x0, 0x0, 0x0, 0x51, 0xf
		};
		
		byte[] buf5 = {
				0x0, 0x5, 0x2, 0x0, 
				0x0, 0x0, 0x9, 0xffffffc4, 
				0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x53, 0x42, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x20, 
				0x3f, 0x3f, 
				0x43, 
				0x0, 0xffffffec, 0x60, 
				0x1, 
				0x38, 0xffffffc9, 0x23, 
				0xffffffff, 0x46, 0x3f, 0x16, 
				0x0, 0x0, 0xa, 0x73, 0x3, 0x65, 0xffffffc0, 0x0, 0x0, 0x1a, 0x9, 0x0, 0x23, 0xffffffb2, 0xffffffd6, 0xc, 0x5, 0x6, 0x16, 0x1a, 0x38, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x51, 0xe, 0x0
		};

		byte[] buf6 = {
				0x0, 0x5, 0x2, 0x0, 
				0x0, 0x0, 0x9, 0xffffffc4, 
				0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x53, 0x42, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x20, 
				0x3f, 0x18, 
				0x43, 
				0x1, 0x13, 0x70, 
				0x1, 
				0x38, 0xffffffc9, 0x8, 
				0xffffffff, 0x46, 0x3f, 0x17, 
				
				0x0, 0x0, 0x7, 0xe, 0x0, 0xb, 0xfffffff3, 0x0, 0x0, 0x17, 0x9, 0x0, 0x23, 0xffffffd6, 0xb, 0xc, 0x5, 0x7, 0x0, 0x1f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xffffffff, 0x0, 0x0, 0x0, 0x51, 0x10, 0x0
		};
		
		short[] buf7 = {
				0x0, 0x5, 0x2, 0x0, 
				0x0, 0x0, 0x9, 0xffffffc4, 
				0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
				0x20, 0x20, 0x20, 0x53, 0x42, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x20, 
				0x3f, 0x18, 
				0x43, 
				0x1, 0x3a, 0x3f, 
				0x1, 
				0x38, 0xffffffd1, 0x3e, 
				0xffffffff, 0x45, 0xffffffce, 0x10, 
				
				0x0, 0x0, 0x0, 0x72, 0x2, 0xffffffaa, 0xffffffeb, 0x0, 0x0, 0x15, 0x6, 0x0, 0x24, 0x4a, 0x7d, 0xc, 0x5, 0x8, 0x11, 0x30, 0x1a, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x51, 0x9, 0x0	
		};

		short[] buf8 = {
				0x0, 0x5, 0x2, 0x0, 
				0x0, 0x0, 0x9, 0xc4, 
				0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
				0x20, 0x20, 0x20, 0x53, 0x42, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x20, 
				0x3f, 0x18, 
				0x43,
				0x1, 0x3a, 0x3f, 
				0x1, 
				0x38, 0xd1, 0x3e, 
				0xff, 0x45, 0xce, 0x10, 
				
				0x0, 0x0, 0x0, 0x72, 0x2, 0xaa, 0xeb, 0x0, 0x0, 0x15, 0x6, 0x0, 0x24, 0x4a, 0x7d, 0xc, 0x5, 0x8, 0x11, 0x30, 0x1a, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x51, 0x9, 0x0	
		};

		// starting from position 29, print the first 2 bytes, then 1 byte, then 3 and so on
//		dumpBytes(buf, new int[] {4,4,22,2, 1, 3, 1, 3, 4, 2, 2, 3, 3,1,4,6,26,4},0);
//		System.out.println(getLat(new short[] {0x31, 0xBD, 0xA7}));
//		System.out.println(getLng2(new short[] {0xFF, 0x6C, 0xDC, 0x9A}));
		
		dumpBytes(buf7, new int[] {4,4,22,2, 1, 3, 1, 3, 4, 2, 2, 3, 3,1,4,6,26,4},0);
		dumpBytes(buf8, new int[] {4,4,22,2, 1, 3, 1, 3, 4, 2, 2, 3, 3,1,4,6,26,4},0);
		
		//3721.488281,N,12156.143555
//		System.out.println(getLat("3721488281"));
//		System.out.println(getLng("12156143555"));
//		dumpBlocks(buf6, 4);
		
		System.out.println("==================================================");
		System.out.println(getBaseValue(new short[] {0x00, 0x38, 0xffffffc9, 0x8}));
		System.out.println(getBaseValue(new short[] {0xffffffff, 0x46, 0x3f, 0x17}));

		System.out.println(getBaseValue(new short[] {0x00, 0x38, 0xc9, 0x8}));
		System.out.println(getBaseValue(new short[] {0xff, 0x46, 0x3f, 0x17}));

		//
		//dumpBytes(buf);
//		dumpAscii(buf, 8, 22);
		
//		dumpBytes(buf4, new int[] {4,4,22,2, 1, 3, 1, 3, 4, 2, 2, 3, 3,1,4,6,26,4},0);
//		dumpBytes(buf3, new int[] {4,4,22,2, 1, 3, 1, 3, 4, 2, 2, 3, 3,1,4,6,26,4},0);
//		dumpBytes(buf4, new int[] {11,22},0);
	}
	
	public static void dumpAscii(byte[] buf, int start, int length) {
		 byte[] range = Arrays.copyOfRange(buf, start, start+22);
		 System.out.println(new String(range));
	}

	public static byte[] hexToBytes(byte[] hex) {
		    int length = hex.length / 2;
		    byte[] raw = new byte[length];
		    for (int i = 0; i < length; i++) {
		      int high = Character.digit(hex[i * 2], 16);
		      int low = Character.digit(hex[i * 2 + 1], 16);
		      int value = (high << 4) | low;
		      if (value > 127)
		        value -= 256;
		      raw[i] = (byte) value;
		    }
		    return raw;
		  }
	 
	public static void dumpBytes(short[] buf, int[] sizes, int start) {

		int offset = start;
		int value = 0;
		System.out.println("\n\n============================================");
		for (int i=0; i<sizes.length; i++) {
			value = 0;
			int size = sizes[i];
			for (int j=0; j<size; j++) {
				if (offset+j >= buf.length) {
					System.out.println("exiting ...");
					System.out.println(offset+j);
					System.out.println(buf.length);
					
					return;
				}
				value = value << 8 | (buf[offset+j] & 0xff);
			}
			System.out.println("(" + size + ")" + value);
			offset += size;
		}
	}
	

	
	public static void dumpNumber(byte[] buf) {
		int value = 0;
		for (int i=0; i<buf.length; i++) {
			value = value << 8 | (buf[i] & 0xff);
		}
		System.out.println(value);
	}
	
	public static void dumpBlocks(byte[] buf, int blockSize) {
		int value = 0;
		for (int i=0; i<buf.length; i++) {
			value = 0;
			int size = blockSize;
			for (int j=0; j<size; j++) {
				if (i+j >= buf.length) {
					System.out.println("exiting ...");
					return;
				}
				value = value << 8 | (buf[i+j] & 0xff);
			}
			System.out.println("(" + size + ")" + value);
		}
	}

	public static float getLat(String strF) {
		System.out.println("input " + strF);
		float f = 0F;
		String s1 = strF.substring(0, 2);
		System.out.println(s1);
		float a = Float.valueOf(s1);
		System.out.println(a);
		String s2 = strF.substring(2, strF.length());
		System.out.println(s2);
		float b = Float.valueOf(s2);
		System.out.println(b);
		f = a + b/60.0F;
		System.out.println("final " + f);
		return f;
	}
	
	public static float getLat(short[] latBuf) {
		float f = getBaseValue(latBuf);
		System.out.println("\n\n\n" + f);
		f /= 1000;
		System.out.println(f);
		String strF = String.valueOf(f);
		String s1 = strF.substring(0, 2);
		System.out.println(s1);
		float a = Float.valueOf(s1);
		System.out.println(a);
		String s2 = strF.substring(2, strF.length());
		System.out.println(s2);
		float b = Float.valueOf(s2);
		System.out.println();
		f = a + b/60.0F;
		System.out.println("final " + f);
		return f;
	}

	public static float getLng(String val) {
		System.out.println("input " + val);
		
		
		float f = Math.abs(Float.valueOf(val));	
		int sign = f < 0 ? -1 : 1;
		System.out.println(f);
		f /= 1000;
		System.out.println(f);
		String strF = String.valueOf(f);
		String s1 = null;
		String s2 = null;
		s1 = strF.substring(0, 4);
		s2 = strF.substring(4, strF.length());
		System.out.println(s1);
		System.out.println(s2);
		float a = Float.valueOf(s1);
		System.out.println(a);
		float b = Float.valueOf(s2);
		System.out.println(b);
		f = sign*(a + (b/60.0F));
		System.out.println("final " + f);
		return f;

	}
	
	public static float getLng(short[] lngBuf) {
		
		int baseValue = getBaseValue(lngBuf);
		
		int sign = baseValue < 0 ? -1 : 1;
		
		float f = Math.abs(baseValue);
		
		System.out.println("\n\n\n" + f);
		f /= 1000;
		System.out.println(f);
		String strF = String.valueOf(f).replace('-', ' ').trim();
		String s1 = null;
		String s2 = null;
		if (sign < 0) {
			s1 = strF.substring(0, 2);
			s2 = strF.substring(2, strF.length());
		} else {
			s1 = strF.substring(0, 3);
			s2 = strF.substring(3, strF.length());
		}
		System.out.println(s1);
		System.out.println(s2);
		float a = Float.valueOf(s1);
		System.out.println(a);
		float b = Float.valueOf(s2);
		System.out.println(b);
		f = (sign*a) + (b/60.0F);
		System.out.println("final " + f);
		return f;
	}

	public static float getLng2(short[] lngBuf) {
		
		int baseValue = getBaseValue(lngBuf);
		
		int sign = baseValue < 0 ? -1 : 1;
		
		float f = Math.abs(baseValue);
		
		f /= 1000;
		String strF = String.valueOf(f);
		String s1 = null;
		String s2 = null;
		if (sign < 0) {
			s1 = strF.substring(0, 2);
			s2 = strF.substring(2, strF.length());
		} else {
			s1 = strF.substring(0, 3);
			s2 = strF.substring(3, strF.length());
		}
		float a = Float.valueOf(s1);
		float b = Float.valueOf(s2);
		f = (sign*a) + (b/60.0F);
		return f;
	}

	private static int getBaseValue(short[] buf) {

		int i = ((0xFF & buf[0]) << 24) | ((0xFF & buf[1]) << 16) |
        ((0xFF & buf[2]) << 8) | (0xFF & buf[3]);
		return i;
//		int value = 0;
//		for (int j=0; j<buf.length; j++) {
//			value = value << 8 | (buf[j] & 0xff);
//		}
//		return value;
	}
}
